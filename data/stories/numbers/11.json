{
  "id": 11,
  "title": "並びと名付け",
  "icon": "11",
  "summary": "配列と連想—順番と名前で整理する",
  "story": [
    "大正5年(1916年) 秋、紬は店の荷を並べ、凪からの電報を仕分けた。順番に読みたい文は一列に、名で呼びたい宛先は名寄せ帳に。",
    "配列(Array)は0から始まる番号で取り出す。順序が大切な並びにはちょうどよい。",
    "連想(Map/オブジェクト)は『名前→値』で素早く見つける。『商品ID→在庫』『宛名→住所』のように。",
    "JSONでは [ ... ] が配列、{ ... } がオブジェクト。値にはさらに配列やオブジェクトを入れ子にできる。",
    "実務では『一覧=配列』『検索=ID→オブジェクトのMap』の併用が定番。",
    "紬は電報の履歴を配列に、送り先の帳面をMapに。目的で器を選べば、迷いは減る。",
    "例: 電報の並び [\"会えるか\", \"無事です\"] は、0番目が最初の文。",
    "例: 宛先の帳面 { \"凪\": \"横浜港\" } は、名前で住所をすぐ取り出せる。",
    "配列は並べ替えや追加(末尾に足す)が得意。",
    "連想は『その名前があるか』をすぐ確かめられる。",
    "紬は並びで物語を追い、名付けで凪の居場所を逃さない。",
    "配列は末尾追加(push)が得意、先頭挿入は重いことが多い(O(n))。",
    "探索は線形(O(n))だが、添字が分かれば取り出しは一瞬(O(1))。",
    "連想(Map)はキーからO(1)で辿れる国もあれば、順序を覚えるMapもある。器の性格を知ると守りが固い。",
    "同じ名前が二度現れると、最後が勝つ(上書き)世界もある。重複キーは恋文の誤配—避けるに限る。",
    "Set は重複を許さない集い。『一度だけ会う約束』に似て、名を一つに保つ。",
    "並べ替えは安定(stable)だと、等しい鍵の並びが保たれて物語が崩れない。",
    "JSONの配列は順序が命。オブジェクトのキー順は約束されないことが多い—順序が必要なら配列で運ぶ。",
    "Map と Object の違い: 任意キーの扱い、プロトタイプ汚染の警戒、サイズ(size)の取りやすさ。用途で器を選ぶ。",
    "二人の帳面は、『履歴=配列』『宛先=Map』『既読=Set』。役目が決まると、心も迷わない。"
  ],
  "keyPoints": [
  { "term": "配列(Array)", "definition": "順番に格納し、番号(インデックス)で取り出す構造" },
  { "term": "連想配列(Map)", "definition": "名前(キー)に値を結び、名前で取り出す構造" }
  ]
}
