{
  "id": 6,
  "title": "桁の限界",
  "icon": "06",
  "summary": "オーバーフローの罠—範囲と符号",
  "story": [
    "大正3年(1914年) 夏、配給と検閲が厳しくなる町。電信には文字数の制限があり、紬は凪への文を短く整えた。",
    "数の世界にも器の大きさがある。決められたビットからはみ出すと値が回り込む—これがオーバーフロー。",
    "8ビットでは、符号なしは0〜255、符号ありは-128〜127。負の数は『2の補数』で表す。",
    "境界の一歩(127+1)が別世界(-128)へ落ちることもある。帳簿や計測では致命的なズレだ。",
    "対策は、入口で範囲を確かめる、器(16/32/64ビット)を大きく選ぶ、どうしても足りなければ任意精度を使う。",
    "紬は桁の限界を帳面に赤で記し、電報の文も最小限に。器を知れば、想いはこぼれない。",
    "例: 8ビットで 255+1 は 0 に戻る。-128-1 は 127 になる。",
    "枚数や金額の桁が足りないと、合計が突然小さく見えることがある。",
    "最大値・最小値をメモしておき、越えたら止めるしくみを入れる。",
    "紬は文字数の上限を先に決め、言葉を削りすぎないようにした。",
    "『届いてほしい想いほど、器を大きく』—二人の合言葉になった。",
    "二の補数の見取り図: 0b01111111 は 127、そこへ 1 を足すと 0b10000000 の -128 へ折り返す。",
    "負の数は最上位ビットが1。-1は全ビット1(8ビットなら0xFF)。加算器はそのまま足せばよい—規則の美しさ。",
    "言語により整数の器は違う。Cのintは環境次第、JavaScriptのNumberは安全整数が±(2^53−1)。",
    "大きな金額や桁の要る場面では、任意精度(BigInt/decimal)の器へ移すと安心だ。",
    "境界値テストは恋の段取り。最大−1・最大・最大+1、最小−1を試し、落ちる前に手を伸ばす。",
    "入力で範囲を弾き、演算の前後で桁あふれ検知を—二人の約束もまず入口で確かめる。",
    "桁の持ち運びも忘れずに。別の蔵(システム)へ渡す前に器の大きさを確かめる。",
    "港の秤も器を替えればこぼれない。紬は大きな器に言葉をすくい、胸の奥まで運んだ。",
    "桁の限界を知り、器を選ぶ。紬と凪は、想いをこぼさないために、桁の持ち運びを学んだ。"
  ],
  "keyPoints": [
  { "term": "オーバーフロー", "definition": "表現範囲を超えて値が回り込む現象" },
  { "term": "符号あり/なし", "definition": "負の数を扱うかどうかの違いで範囲が変わる" }
  ]
}
