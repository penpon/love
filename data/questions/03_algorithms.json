{
  "category": "アルゴリズム入門",
  "categoryId": "algorithms",
  "questions": [
    {
      "id": 1,
      "story": "人混みの駅で紬は凪を探す。順に一人ずつ確かめるしかないとき、焦らず目で追うのがいちばん確実だった。",
      "question": "整列されていない一覧から目的の要素を最も単純に探す方法はどれですか？",
      "options": ["線形探索", "二分探索", "ハッシュ探索", "深さ優先探索"],
      "correctAnswer": 0,
      "explanation": "整列されていない場合は、先頭から順に調べる線形探索が基本です。",
      "difficulty": "初級",
      "tags": ["探索", "線形探索"],
      "relatedChapter": 1
    },
    {
      "id": 2,
      "story": "検品台の帳面を番号順に並べると、凪は目的の札をすぐ見つけられた。『並んでいること』が近道の条件だ。",
      "question": "二分探索を正しく行うための前提条件はどれですか？",
      "options": ["対象が整列済みである", "要素が一意で重複がない", "要素数が2のべき乗", "添字が1から始まる"],
      "correctAnswer": 0,
      "explanation": "二分探索は中央で区切って範囲を半分に絞り込むため、データが整列されていることが必須です。",
      "difficulty": "初級",
      "tags": ["探索", "二分探索"],
      "relatedChapter": 1
    },
    {
      "id": 3,
      "story": "紬は隣り合う反物を見比べて、順番が逆なら入れ替える。何度も繰り返すうち、自然と整っていく。",
      "question": "隣り合う要素を比較・交換して整列させるアルゴリズムはどれですか？",
      "options": ["バブルソート", "挿入ソート", "マージソート", "選択ソート"],
      "correctAnswer": 0,
      "explanation": "隣接要素を比較して大きい方を後ろへ“泡のように押し上げる”のがバブルソートです。",
      "difficulty": "初級",
      "tags": ["整列", "バブルソート"],
      "relatedChapter": 2
    },
    {
      "id": 4,
      "story": "少し乱れた棚を整えるとき、紬は『本来あるべき場所へ差し込む』やり方で手早く直した。",
      "question": "すでにほぼ整っている配列に強い整列方法はどれですか？",
      "options": ["クイックソート", "挿入ソート", "ヒープソート", "ボゴソート"],
      "correctAnswer": 1,
      "explanation": "挿入ソートは局所的な乱れの修正に強く、ほぼ整列済みのケースで高速に動作します。",
      "difficulty": "初級",
      "tags": ["整列", "挿入ソート"],
      "relatedChapter": 2
    },
    {
      "id": 5,
      "story": "凪は『問題を小さく割って同じ手順で解く』手紙を寄越した。紬は折り紙の鶴を思い出す。",
      "question": "『問題を自分自身のより小さな問題に分けて解く』考え方を何と呼びますか？",
      "options": ["再帰", "貪欲法", "動的計画法", "分枝限定法"],
      "correctAnswer": 0,
      "explanation": "再帰は同じ構造のより小さな問題を繰り返し解く手法です。",
      "difficulty": "初級",
      "tags": ["再帰"],
      "relatedChapter": 3
    },
    {
      "id": 6,
      "story": "過去の計算結果を記しておけば、同じ計算を繰り返さずに済む。紬は帳面の効用に頷いた。",
      "question": "動的計画法（DP）の重要なキーワードの組み合わせはどれですか？",
      "options": ["最適部分構造と重複部分問題", "乱択と近似", "深さ優先とバックトラック", "ヒューリスティックと焼きなまし"],
      "correctAnswer": 0,
      "explanation": "DPは『最適部分構造』と『重複部分問題』を利用し、部分解を記録・再利用します。",
      "difficulty": "中級",
      "tags": ["動的計画法", "DP"],
      "relatedChapter": 3
    },
    {
      "id": 7,
      "story": "等しい札の順番が保たれると、紬は控えと照らし合わせやすいと感じた。",
      "question": "『等しいキーの相対順が保たれる』性質（安定性）を満たす整列はどれですか？",
      "options": ["バブルソート", "クイックソート", "ヒープソート", "選択ソート"],
      "correctAnswer": 0,
      "explanation": "バブルソートは安定な整列です（クイック/ヒープ/選択は基本実装では不安定）。",
      "difficulty": "中級",
      "tags": ["整列", "安定性"],
      "relatedChapter": 2
    },
    {
      "id": 8,
      "story": "荷の数が増えるほど手間も増えるが、比例して増えるなら先は読める——紬の勘所だ。",
      "question": "計算量が O(n) であるとは、どのような増え方を意味しますか？",
      "options": ["入力サイズに比例して増える", "一定時間で変わらない", "指数的に増える", "対数的に増える"],
      "correctAnswer": 0,
      "explanation": "O(n) は入力サイズ n に比例する時間（または空間）を要することを表します。",
      "difficulty": "初級",
      "tags": ["計算量", "ビッグオー"],
      "relatedChapter": 2
    },
    {
      "id": 9,
      "story": "列は前から順に捌き、箱は最後に入れた物から取り出す。紬の作法は自然と理にかなっていた。",
      "question": "データ構造の説明として正しいものはどれですか？",
      "options": ["キュー=先入れ先出し / スタック=後入れ先出し", "キュー=後入れ先出し / スタック=先入れ先出し", "両方とも先入れ先出し", "両方とも後入れ先出し"],
      "correctAnswer": 0,
      "explanation": "キューはFIFO、スタックはLIFOが基本動作です。",
      "difficulty": "初級",
      "tags": ["データ構造", "スタック", "キュー"],
      "relatedChapter": 1
    },
    {
      "id": 10,
      "story": "等間隔で並ぶ街灯を辿れば、最短で港に着ける。寄り道せず層ごとに広がって進むのが近道だ。",
      "question": "無向グラフで辺の重みがすべて等しいとき、始点からの最短経路発見に適した探索は？",
      "options": ["幅優先探索 (BFS)", "深さ優先探索 (DFS)", "山登り法", "焼きなまし法"],
      "correctAnswer": 0,
      "explanation": "重みが等しい場合、BFSは層ごとに最短距離で探索するため最短経路が得られます。",
      "difficulty": "中級",
      "tags": ["グラフ", "BFS", "最短経路"],
      "relatedChapter": 1
    }
  ],
  "metadata": {
    "totalQuestions": 10,
    "difficulty": { "初級": 7, "中級": 3, "上級": 0 },
    "estimatedTime": "15分",
    "passingScore": 70,
    "tags": ["探索", "整列", "再帰", "動的計画法", "計算量", "データ構造", "グラフ"]
  }
}
