{
  "id": 12,
  "title": "JSONという手紙",
  "icon": "12",
  "summary": "人にも機械にも読みやすいデータの書式",
  "story": [
    "大正6年(1917年) 春、検閲の厳しい時代、紬は店の記録と凪への合図を『形の決まった文』で整えた。",
    "JSONは軽く読みやすい手紙の型。{...}は名と値の束(オブジェクト)、[...]は並び(配列)を表す。",
    "値に使えるのは、数値・文字列・真偽・null・配列・オブジェクト。関数や生の日付は直接は書けない。",
    "書き方の要(かなめ): キーと文字列は二重引用符、末尾カンマは不可、コメントは書けない(別の欄やREADMEへ)。",
    "例: { \"品名\": \"反物\", \"本数\": 12, \"長さ\": 13.5, \"在庫\": true, \"タグ\": [\"綿\", \"藍\"] }",
    "やり取りは JSON.stringify で文字にし、受け取りは JSON.parse で読む。",
    "末尾カンマを付けない。付けるとエラーになる。",
    "コメントは書けない。別紙やREADMEに説明を書く。",
    "日付は文字列で書き(ISO 8601: 2025-09-07T22:18:00+09:00)、読む側で時刻に直すとよい。",
    "数値は桁に限りがある世界もある。通貨や大きなIDは文字列で運び、読む側で型に直すと安全。",
    "BigIntは素のJSONに直接は載らない。必要なら文字列で包むか、拡張の約束を交わす。",
    "制御文字はエスケープする。改行\n、復帰\r、タブ\t、引用符\"、バックスラッシュ\\。",
    "重複キーは後勝ちの世界が多い。意図せぬ上書きを避けるため、同じ名は一度だけに。",
    "形の約束(JSON Schema)を添えれば、受け取り側は検証で早く気づける。破れた手紙は入口で戻す。",
    "大量の便りは1行1文(JSON Lines/NDJSON)で流すと、流れ読みがしやすい。",
    "流れ(ストリーミング)で読むなら、1件ずつ解いて処理する。途中で途切れても、残りはまた後で。",
    "整形(インデント)は人の目のごちそう。運ぶときは最小化(minify)で軽く、書棚では読みやすく。",
    "鍵の順序は約束されない世界もある。順序が必要なら配列で持つ。",
    "信の道のために: 受け取ったJSONをそのまま画面に出さぬ(エスケープ)。意図せぬ実行を招かないためだ。",
    "紬は合図も同じ形にそろえ、凪は安心して読み解いた。形が揃えば、心も誤解なく届く。",
    "最後に二人は封を確かめる。『形が正しければ、距離があっても想いは崩れない』と。"
  ],
  "keyPoints": [
  { "term": "JSON", "definition": "軽量なデータ表現。名前と値の組をカンマで連ねる" },
  { "term": "入れ子(ネスト)", "definition": "値として別の構造を持たせ、まとまりを表す" }
  ]
}
